<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Paypal\Block\Express\InContext\SmartButton;

/** @var SmartButton $block */
/** @var Escaper $escaper */

$widgetData = json_decode($block->getJsInitParams(), true);
$widgetJson = json_encode($widgetData['Magento_Paypal/js/in-context/product-express-checkout']);

$uniqueId   = '_' . uniqid();
?>
<div x-data="initPayPalInContext<?= $escaper->escapeHtmlAttr($uniqueId) ?>()"
     x-ref="paypalInContextProduct"
     @private-content-loaded.window="getSectionData($event.detail.data)"
     class="paypal checkout paypal-logo <?= $escaper->escapeHtmlAttr($block->getContainerId()) ?>-container">
</div>

<script>
    function initPayPalInContext<?= $escaper->escapeHtmlAttr($uniqueId) ?>() {
        return {
            refs: false,
            paypalInContextProduct: null,
            clientConfig: <?= /** @noEscape */ $widgetJson ?>.clientConfig || {},
            customerSection: {},
            cartSection: false,
            actions: {},
            triggerAction: false,
            getSectionData(sectionData) {
                if (sectionData.cart) {
                    this.cartSection = sectionData.cart;
                }
            },
            initializePayPalScript() {
                return new Promise((resolve, reject) => {
                    const scriptId = 'paypal-script';
                    const clientConfig = this.clientConfig;
                    
                    let paypalScript = document.getElementById(scriptId);
                    if (paypalScript) {
                        return resolve(window.paypal);
                    }

                    const script = document.createElement('script');
                    script.src = clientConfig.sdkUrl;
                    script.id = scriptId;
                    //todo
                    //script.setAttribute('data-partner-attribution-id', clientConfig.dataAttributes['data-partner-attribution-id']);

                    script.addEventListener('load', function() {
                        resolve(window.paypal);
                    }, false);

                    script.addEventListener('error', function() {
                        reject(new Error('PayPal SDK could not be loaded'));
                    }, false);

                    document.body.appendChild(script);
                })
            },
            initializeButtons() {
                this.initializePayPalScript().then(() => {

                    const clientConfig = this.clientConfig;
                    const paypal = window.paypal;
                    const getCookie = this.getCookie;
                    const customerSection = this.customerSection;
                    const cartSection = this.cartSection;
                    const triggerAddToCartClick = () => {
                        return new Promise((resolve, reject) => {
                            
                            //check add to cart
                            const addToCartButton = document.getElementById('product-addtocart-button');
                            if (addToCartButton) {
                                
                                //POST request ist more better
                                //addToCartButton.click();
                                
                                //reload cart data
                                alert('reload cart data');
                                
                                //and then
                                //this.triggerAction = true;
                                
                                //after reload
                                resolve();
                            } else {
                                //console.error('Add to Cart button not found!');
                                //reject(new Error('Add to Cart button not found'));
                            }
                        });
                    };                    
                    paypal.Buttons({
                        style: {
                            ...clientConfig.styles, 
                            height: 42, //set the style.height option to a value from 25 to 55.
                            disableMaxWidth: false, //The button has a default maximum width of 750px, but you can make the button larger with tru and set container size
                            tagline: false //Set the style.layout to horizontal for taglines.
                        },                        
                        onInit: (data, actions) => {
                            this.actions = actions || this.actions;
                            actions.disable();
                        },
                        onClick: async (data, actions) => {
                            try {
                                await triggerAddToCartClick();    
                                paypal.actions = this.actions;                         
                                alert('make action after add cart');
                            } catch (error) {
                                console.error(error);
                            }
                        },   
                        createOrder() {
                            const params = "quote_id=" + cartSection.cartId +
                                "&customer_id=" + (clientConfig.customerId ? clientConfig.customerId : '' ) +
                                "&form_key=" + (getCookie('form_key') || '') +
                                "&button=" + clientConfig.button;

                            return window.fetch(clientConfig.getTokenUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                            .then(result => result.json())
                            .then(data => data.token)
                            .catch((error) => console.log(error));
                        },
                        
                        onApprove(data, actions) {
                            const params = "paymentToken=" + (data.orderID || '') +
                                "&payerId=" + (data.payerID || '') +
                                "&quoteId=" + (cartSection.quoteId || '') +
                                "&customerId=" + (clientConfig.customerId || '') +
                                "&form_key=" + (getCookie('form_key') || '');

                            return window.fetch(clientConfig.onAuthorizeUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                            .then(data => {
                                return data.json()
                            }).then(response => {
                                if (response.success) {
                                    return actions.redirect(response.redirectUrl);
                                }

                                throw new Error(response['error_message']);
                            })
                            .catch((error) => console.log(error)).finally(() => {
                                const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                                window.dispatchEvent(reloadCustomerDataEvent);
                            });
                        },
                        
                        onCancel(data, actions) {
                            window.location.href = clientConfig.onCancelUrl;
                        },
                        onError(err) {
                            console.error('Unfortunately, an error occurred during the enquiry');
                        }
                    }).render(this.$refs.paypalInContextProduct);
                }).catch(error => {
                    console.error(error.message);
                });
            },
            getCookie(name) {
                const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
                return v ? v[2] : null;
            },
            init() {
                window.addEventListener('init-external-scripts', () => {
                    this.initializeButtons()
                }, { once: true });
            }
        }
    }
</script>
