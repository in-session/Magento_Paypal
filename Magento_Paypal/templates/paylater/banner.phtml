<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2022-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Paypal\Block\PayLater\Banner;
use Magento\Checkout\Block\Cart;

/** @var Escaper $escaper */
/** @var Banner $block */
/** @var Cart $cartBlock */

$widgetData = json_decode($block->getJsLayout(), true);
$widgetConfigJson = json_encode($widgetData['components']['payLater']['config']);

$uniqueId = '_' . uniqid();
?>
<?php $cartBlock = $block->getLayout()->getBlock('checkout.cart'); ?>
<?php if ($block->getData('placement') !== 'cart' || is_object($cartBlock) && $cartBlock->getItemsCount()): ?>
    <div x-intersect.once="checkAndInitializeButtons()"
         x-data="paypalPaylater<?= $escaper->escapeHtmlAttr($uniqueId) ?>()" 
         @private-content-loaded.window="getData($event.detail.data)"
         class="px-6 md:px-0 my-3 min-h-[20px] order-last">
        <div x-ref="ppMessage"
             class="paypal checkout paypal-logo <?= $escaper->escapeHtmlAttr($block->getContainerId()) ?>-container"
             data-pp-message>
        </div>
    </div>
    <script>
        function paypalPaylater<?= $escaper->escapeHtmlAttr($uniqueId) ?>() {
            return {
                
                /**
                 * Configuration object derived from server-side JSON.
                 * @type {Object}
                 */
                clientConfig: <?= /** @noEscape */ $widgetConfigJson ?>,
                
                /**
                 * cart section data.
                 * @type {Object|boolean}
                 */
                cartSection: false,
                
                /**
                 * @type {Object|boolean}
                 */
                alreadyLoaded: false, 
                
                /**
                 * Handles the event when dynamic content related to the cart is loaded.
                 * Updates the cartSection data based on the provided data.
                 * 
                 * @param {Object} data Data about the cart section.
                 */
                getData(data) {
                    if (data.cart) {
                        this.cartSection = data.cart;
                        this.checkAndInitializeButtons();
                    }
                },
                    
                /**
                 * Initializes the PayPal SDK by dynamically injecting the PayPal script into the page.
                 * Resolves with the PayPal object once the SDK is loaded, or rejects the promise on error.
                 * 
                 * @returns {Promise<Object>} A promise that resolves with the PayPal object.
                 */
                initializePayPalScript() {
                    if (!window.paypalScriptPromise) {
                        window.paypalScriptPromise = new Promise((resolve, reject) => {
                            const scriptId = 'paypal-script';

                            const paypalScript = document.querySelector('#' + scriptId);
                            if (paypalScript) {
                                if (window.paypal) {
                                    resolve(window.paypal);
                                } else {
                                    paypalScript.addEventListener('load', () => resolve(window.paypal), { once: true });
                                    paypalScript.addEventListener('error', () => reject(new Error('PayPal SDK could not be loaded')), { once: true });
                                }
                                return;
                            }

                            const config = this.clientConfig;

                            const script = document.createElement('script');
                            script.src = config.sdkUrl;
                            script.id = scriptId;
                            script.setAttribute('data-partner-attribution-id', config.dataAttributes['data-partner-attribution-id']);

                            document.body.appendChild(script);

                            script.onload = () => resolve(window.paypal);
                            script.onerror = () => reject(new Error('PayPal SDK could not be loaded'));
                        });
                    }
                    return window.paypalScriptPromise;
                },
                    
                /**
                 * Initializes and renders the PayPal buttons and messages based on the current cart section.
                 * Utilizes the PayPal SDK loaded by initializePayLater.
                 */
                async initializeButtons() {                    
                    try {
                        await this.initializePayPalScript();
                        
                        const paypal = window.paypal;
                        const attributes = this.clientConfig.attributes;

                        paypal && paypal.Messages({
                            amount: this.cartSection.subtotalAmount,
                            placement: attributes['data-pp-placement'] || 'product',
                            style: {
                                'layout': attributes['data-pp-style-layout'] || 'text',
                                'logo': {
                                    'type': attributes['data-pp-style-logo-type'] || 'primary',
                                    'position': attributes['data-pp-style-logo-position'] || 'left',
                                },
                                'text': {
                                    'color': attributes['data-pp-style-text-color'] || 'black',
                                    'size': attributes['data-pp-style-text-size'] || '12',
                                },
                                'color': attributes['data-pp-style-color'] || 'blue', 
                                'ratio': attributes['data-pp-style-ratio'] || '1x1',
                            },
                        }).render(this.$refs.ppMessage);

                    } catch (error) {
                        console.error("PayPal SDK could not be loaded: ", error);
                    }
                },
                    
                /**
                 * Check and initialize
                 */    
                checkAndInitializeButtons() {                    
                    const form = document.querySelector('#product_addtocart_form');
                    if (!form) {
                        return;
                    }
                    
                    if (this.cartSection.items && this.cartSection.items.length && !this.alreadyLoaded) {
                        this.initializeButtons().then(() => {
                            this.alreadyLoaded = true;
                        });
                    } else {
                        return;
                    }
                }
            };
        }
    </script>
<?php endif; ?>
