<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Paypal\Block\Express\InContext\SmartButton;

/** @var SmartButton $block */
/** @var Escaper $escaper */

$widgetData = json_decode($block->getJsInitParams(), true);
$widgetJson = json_encode($widgetData['Magento_Paypal/js/in-context/product-express-checkout']);

$uniqueId   = '_' . uniqid();
?>

<div x-data="initPayPalInContext<?= $escaper->escapeHtmlAttr($uniqueId) ?>()"
     @private-content-loaded.window="getData($event.detail.data)"
     class="min-h-[42px]">
    <div x-ref="paypalInContextProduct"
         class="paypal checkout paypal-logo <?= $escaper->escapeHtmlAttr($block->getContainerId()) ?>-container">
    </div>
</div>
<script>
    /**
     * Initializes PayPal In-Context functionality with configuration derived from the server.
     *
     * @returns {Object} A configuration object containing methods for PayPal SDK initialization and event handling.
     */
    function initPayPalInContext<?= $escaper->escapeHtmlAttr($uniqueId) ?>() {
        return {
            clientConfig: <?= /** @noEscape */ $widgetJson ?>.clientConfig,
            customerSection: {},
            cartSection: false,
            actions: {},
            alreadyLoaded: false,
            /**
             * Handles updates to cart or customer data.
             *
             * @param {Object} data The data containing updates for customer or cart sections.
             */    
            getData(data) {
                if (data.customer) {
                    this.customerSection = data.customer;
                }
                if (data.cart) {
                    this.cartSection = data.cart;
                    this.checkAndInitializeButtons()
                }
            },
            /**
             * Dynamically loads the PayPal SDK and initializes PayPal buttons.
             *
             * @returns {Promise} A promise that resolves when the PayPal SDK is loaded and ready.
             */    
            initializePayPalScript() {
                if (!window.paypalScriptPromise) {
                    window.paypalScriptPromise = new Promise((resolve, reject) => {
                        const scriptId = 'paypal-script';

                        const paypalScript = document.querySelector('#' + scriptId);
                        if (paypalScript) {
                            if (window.paypal) {
                                resolve(window.paypal);
                            } else {
                                paypalScript.addEventListener('load', () => resolve(window.paypal), { once: true });
                                paypalScript.addEventListener('error', () => reject(new Error('PayPal SDK could not be loaded')), { once: true });
                            }
                            return;
                        }

                        const config = this.clientConfig;
                        const script = document.createElement('script');
                        script.src = config.sdkUrl;
                        script.id = scriptId;
                        script.setAttribute('data-partner-attribution-id', config.dataAttributes['data-partner-attribution-id']);

                        document.body.appendChild(script);

                        script.onload = () => resolve(window.paypal);
                        script.onerror = () => reject(new Error('PayPal SDK could not be loaded'));
                    });
                }

                return window.paypalScriptPromise;
            },
            /**
             * Asynchronously initializes PayPal buttons using the loaded PayPal SDK.
             */    
            async initializeButtons() {
                try {
                    await this.initializePayPalScript();
                    
                    const paypal = window.paypal;
                    const getCookie = this.getCookie;
                    const config = this.clientConfig;
                    const cartSection = this.cartSection;

                    paypal && paypal.Buttons({
                        style: {
                            ...config.styles,
                            height: 42, // Sets the style.height option to a value from 25 to 55.
                            disableMaxWidth: false, // The button has a default maximum width of 750px
                            tagline: false // Set the style.layout to horizontal for taglines.
                        },
                        onInit: (data, actions) => {
                            this.actions = actions || this.actions;
                        },
                        onClick(data, actions) {
                            
                            // Get form data
                            const form = document.querySelector('#product_addtocart_form');
                            const formData = new FormData(form);
                                                     
                            // Get product value and qty input element                            
                            const productValue = formData.get('product');
                            const itemId = formData.get('item');
                            const qtyInput = document.getElementById('qty[' + productValue + ']');
                            
                            // change qty base on card and input
                            let qtyValue = qtyInput && qtyInput.value ? parseInt(qtyInput.value, 10) : 1;
                            
                            const existingItemIndex = cartSection.items.findIndex(item => item.product_id === productValue);

                            const paramsData = new URLSearchParams({
                                form_key: (getCookie('form_key') || ''),
                                product: productValue,
                                item_id: itemId
                            });                            
                            
                            if (existingItemIndex !== -1) {
                                const existingItem = cartSection.items[existingItemIndex];
                                qtyValue += existingItem.qty;
                            }
                            
                            postUrl = `${BASE_URL}checkout/cart/add/`; 
                            paramsData.append('qty', qtyValue); 
                            paramsData.append('isAjax', 'true');
                            
                            return window.fetch(postUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": paramsData.toString(),
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                            .then(response => {
                                if (response.ok) {
                                    return response.json();
                                    const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                                    window.dispatchEvent(reloadCustomerDataEvent);
                                } else {
                                    return window.dispatchMessages && window.dispatchMessages([{
                                        type: 'error',
                                        text: response.statusText || 'An error occurred during the update process'
                                    }]);
                                }
                            })
                            .catch(error => {
                                window.dispatchMessages && window.dispatchMessages([{
                                    type: 'error',
                                    text: error.message || 'An error occurred during the update process'
                                }]);
                            })
                            .finally(() => {

                            });                            
                        },
                        createOrder() {
                            const params = "quote_id=" + cartSection.cartId +
                                "&customer_id=" + (config.customerId ? config.customerId : '') +
                                "&form_key=" + (getCookie('form_key') || '') +
                                "&button=" + config.button;

                            return window.fetch(config.getTokenUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                            .then(result => result.json())
                            .then(data => data.token)
                            .catch((error) => console.log(error));
                        },

                        onApprove(data, actions) {
                            const params = "paymentToken=" + (data.orderID || '') +
                                "&payerId=" + (data.payerID || '') +
                                "&quoteId=" + (cartSection.quoteId || '') +
                                "&customerId=" + (config.customerId || '') +
                                "&form_key=" + (getCookie('form_key') || '');

                            return window.fetch(config.onAuthorizeUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                            .then(data => {
                                return data.json()
                            })
                            .then(response => {
                                if (response.success) {
                                    return actions.redirect(response.redirectUrl);
                                }

                                throw new Error(response['error_message']);
                            })
                            .catch((error) => console.log(error))
                            .finally(() => {
                                const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                                window.dispatchEvent(reloadCustomerDataEvent);
                            });
                        },
                        onCancel(data, actions) {
                            // No changes as should remain on the same page
                        },
                        onError(err) {
                            // window.location.href = config.onCancelUrl;
                        }
                    }).render(this.$refs.paypalInContextProduct);
                } catch (error) {
                    console.error("Error loading PayPal SDK: ", error);
                }
            },
            /**
             * Checks if the PayPal buttons should be initialized based on current data and state.
             */
            checkAndInitializeButtons() {
                const form = document.querySelector('#product_addtocart_form');
                if (!form) {
                    return;
                }
                if (this.cartSection && !this.alreadyLoaded) {
                    this.initializeButtons().then(() => {
                        this.alreadyLoaded = true;
                    });
                } else {
                    return;
                }
            },
            /**
             * Retrieves a cookie value by its name.
             *
             * @param {string} name The name of the cookie to retrieve.
             * @returns {string|null} The value of the cookie, or null if not found.
             */
            getCookie(name) {
                // Retrieves a cookie value by name
                const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
                return v ? v[2] : null;
            }
        }
    }
</script>
