<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Paypal\Block\Express\InContext\Minicart\SmartButton;

/** @var SmartButton $block */
/** @var Escaper $escaper */

// Get for the parent block
$parentBlockName = str_replace(['.', '-', '_'], '', $block->getParentBlock() ? $block->getParentBlock()->getNameInLayout() : '');

$widgetData = json_decode($block->getJsInitParams(), true);
$widgetJson = json_encode($widgetData['Magento_Paypal/js/in-context/button']);

$uniqueId   = '_' . uniqid();
?>

<div x-data="initPayPal<?= $escaper->escapeHtmlAttr($parentBlockName) ?><?= $escaper->escapeHtmlAttr($uniqueId) ?>()"
     x-ref="paypalInContextProductMinicart<?= $escaper->escapeHtmlAttr($uniqueId) ?>"
     <?php if ($parentBlockName === 'extraactions'): ?>
         @toggle-cart.window="handleCartToggle()"
     <?php else: ?>
         @private-content-loaded.window="getSectionData($event.detail.data)"
     <?php endif; ?>
     class="paypal checkout paypal-logo min-h-[42px] <?= $escaper->escapeHtmlAttr($parentBlockName) ?>-container">
</div>
<script>
    function initPayPal<?= $escaper->escapeHtmlAttr($parentBlockName) ?><?= $escaper->escapeHtmlAttr($uniqueId) ?>() {
        return {
            clientConfig: <?= /** @noEscape */ $widgetJson ?>.clientConfig,
            actions: {},
            <?php if ($parentBlockName === 'extraactions'): ?>
                handleCartToggle(event) {
                    this.checkAndInitializeButtons();
                },
            <?php else: ?>
                customerSection: {},
                cart: false,
                isLoading: false,
                getSectionData(sectionData) {
                    if (sectionData.customer) {
                        this.customerSection = sectionData.customer;
                    }
                    if (sectionData.cart) {
                        this.cart = sectionData.cart;
                    }
                    if (this.cart.items && this.cart.items.length) {
                        // todo: check if allowed by verifying logged in and isGuestCheckoutAllowed = true
                        this.checkAndInitializeButtons();
                    }
                },    
            <?php endif; ?>    
            initializePayPalScript() {
                if (!window.paypalScriptPromise) {
                    window.paypalScriptPromise = new Promise((resolve, reject) => {
                        const scriptId = 'paypal-script';

                        let paypalScript = document.getElementById(scriptId);
                        if (paypalScript) {
                            if (window.paypal) {
                                resolve(window.paypal);
                            } else {
                                paypalScript.addEventListener('load', () => resolve(window.paypal), { once: true });
                                paypalScript.addEventListener('error', () => reject(new Error('PayPal SDK could not be loaded')), { once: true });
                            }
                            return;
                        }

                        const config = this.clientConfig;
                        const script = document.createElement('script');
                        script.src = config.sdkUrl;
                        script.id = scriptId;
                        script.setAttribute('data-partner-attribution-id', config.dataAttributes['data-partner-attribution-id']);

                        document.body.appendChild(script);

                        script.onload = () => resolve(window.paypal);
                        script.onerror = () => reject(new Error('PayPal SDK could not be loaded'));
                    });
                }

                return window.paypalScriptPromise;
            },
            async initializeButtons() {
                try {
                    await this.initializePayPalScript();

                    const paypal = window.paypal;
                    const getCookie = this.getCookie;
                    const config = this.clientConfig;

                    paypal && paypal.Buttons({
                        style: {
                            ...config.styles,
                            height: 42, // Sets the style.height option to a value from 25 to 55.
                            disableMaxWidth: false, // The button has a default maximum width of 750px, but you can make the button larger with true and set container size
                            tagline: false // Set the style.layout to horizontal for taglines.
                        },
                        onInit: (data, actions) => {
                            this.actions = actions || this.actions;
                        },
                        onClick: async (data, actions) => {
                            // Handles the button add to cart
                            console.warn("onClick");
                        },
                        createOrder() {
                            // Retrieves full order details
                            console.warn("createOrder");

                            // Prepares parameters for the order
                            const params = "quote_id=" + config.quoteId +
                                "&customer_id=" + (config.customerId ? config.customerId : '') +
                                "&form_key=" + (getCookie('form_key') || '') +
                                "&button=" + config.button;

                            // Sends a request to create the order
                            return window.fetch(config.getTokenUrl, {
                                    "headers": {
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                    },
                                    "body": params,
                                    "method": "POST",
                                    "mode": "cors",
                                    "credentials": "include"
                                })
                                .then(result => result.json())
                                .then(data => data.token)
                                .catch((error) => console.log(error));
                        },

                        onApprove(data, actions) {
                            // Handles the approval of the payment
                            const params = "paymentToken=" + (data.orderID || '') +
                                "&payerId=" + (data.payerID || '') +
                                "&quoteId=" + (config.quoteId || '') +
                                "&customerId=" + (config.customerId || '') +
                                "&form_key=" + (getCookie('form_key') || '');

                            // Processes the approved payment
                            return window.fetch(config.onAuthorizeUrl, {
                                    "headers": {
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                    },
                                    "body": params,
                                    "method": "POST",
                                    "mode": "cors",
                                    "credentials": "include"
                                })
                                .then(data => {
                                    return data.json()
                                }).then(response => {
                                    if (response.success) {
                                        return actions.redirect(response.redirectUrl);
                                    }

                                    throw new Error(response['error_message']);
                                })
                                .catch((error) => console.log(error)).finally(() => {
                                    const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                                    window.dispatchEvent(reloadCustomerDataEvent);
                                });
                        },
                        onCancel(data, actions) {
                            // No changes as should remain on the same page
                        },
                        onError(err) {
                            // window.location.href = config.onCancelUrl;
                        }
                    }).render(this.$refs.paypalInContextProductMinicart<?= $escaper->escapeHtmlAttr($uniqueId) ?>);
                } catch (error) {
                    console.error("Error loading PayPal SDK: ", error);
                }
            },
            checkAndInitializeButtons() {
                // Checks cart section data and initializes buttons if not already done
                if (this.cart.items && this.cart.items.length && !this.alreadyLoaded) {
                    this.initializeButtons().then(() => {
                        this.alreadyLoaded = true;
                    });
                } else {
                    return;
                }
            },
            getCookie(name) {
                // Retrieves a cookie value by name
                const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
                return v ? v[2] : null;
            }<?php /*?>,
            init() {
                this.checkAndInitializeButtons();
            }<?php */?>
        }
    }
</script>
